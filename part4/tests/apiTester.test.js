const { blogs, seed, newBlog } = require('./helpers');
const mongoose = require('mongoose');
const supertest = require('supertest');
const app = require('../app');
const api = supertest(app);

const minTimeout = 50000;

beforeAll(async () => {
  await seed();
}, minTimeout);

describe(
  'Get all blogs',
  () => {
    let response;
    it(
      'should get all blogs',
      async () => {
        response = await api
          .get('/api/blogs')
          .expect(200)
          .expect('Content-Type', /application\/json/);
        expect(response.body[0]).toEqual(blogs[0]);
      },
      minTimeout
    );
    it('should have defined ids', () => {
      response.body.map(({ _id }) => {
        expect(_id).toBeDefined();
      });
    });
  },
  minTimeout
);

describe(
  'Can add blog post',
  () => {
    delete newBlog._id;
    it('should add post', async () => {
      await api
        .post('/api/blogs')
        .send(newBlog)
        .expect(201)
        .expect('Content-Type', /application\/json/);
    });
    it('blog should be added', async () => {
      const response = await api
        .get('/api/blogs')
        .expect(200)
        .expect('Content-Type', /application\/json/);
      const latestBlog = response.body[response.body.length - 1];
      delete latestBlog._id;
      expect(latestBlog).toEqual(newBlog);
    });
  },
  minTimeout
);

describe(
  'Likes default to zero',
  () => {
    it('should add post', async () => {
      delete newBlog.likes;
      await api
        .post('/api/blogs')
        .send(newBlog)
        .expect(201)
        .expect('Content-Type', /application\/json/);
    });
    it('blogs likes should be zero', async () => {
      const response = await api
        .get('/api/blogs')
        .expect(200)
        .expect('Content-Type', /application\/json/);
      const latestBlog = response.body[response.body.length - 1];
      delete latestBlog._id;
      expect(latestBlog).toEqual({ ...newBlog, likes: 0 });
    });
  },
  minTimeout
);

afterAll(async () => {
  await mongoose.connection.close();
}, minTimeout);
