const { blogs, seed, newBlog } = require('./helpers');
const mongoose = require('mongoose');
const supertest = require('supertest');
const app = require('../app');
const api = supertest(app);

const minTimeout = 50000;

beforeAll(async () => {
  await seed();
}, minTimeout);

describe('Get all blogs', () => {
  let response;
  it(
    'should get all blogs',
    async () => {
      response = await api
        .get('/api/blogs')
        .expect(200)
        .expect('Content-Type', /application\/json/);
      expect(response.body[0]).toEqual(blogs[0]);
    },
    minTimeout
  );
  it('should have defined ids', () => {
    response.body.map(({ _id }) => {
      expect(_id).toBeDefined();
    });
  });
});

describe('Can add blog post', () => {
  it('should add post', async () => {
    await api
      .post('/api/blogs')
      .send(newBlog)
      .expect(201)
      .expect('Content-Type', /application\/json/);
  });
  it('blog should be added', async () => {
    const response = await api
      .get('/api/blogs')
      .expect(200)
      .expect('Content-Type', /application\/json/);
    const latestBlog = response.body[response.body.length - 1];
    expect(latestBlog).toEqual(newBlog);
  });
});

afterAll(async () => {
  await mongoose.connection.close();
});
